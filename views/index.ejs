<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Laravel Browser Sim</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css" rel="stylesheet">
  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
  <script src="https://unpkg.com/@tailwindcss/browser@4"></script>

  <style>
    #browser-loading-overlay {
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: 600;
      font-size: 1.5rem;
      position: absolute;
      top: 32px;
      left: 0;
      z-index: 99999;
      font-family: sans-serif;
      background-color: rgba(0, 0, 0, 0.4);
      visibility: hidden;
    }
  </style>
</head>

<body class="h-screen flex justify-between items-start bg-gray-700">
  <div class="h-[85vh] m-auto relative">
    <div id="browser-loading-overlay">
      Loading...
    </div>

    <form id="form" class="flex gap-2">
      <!-- <button id="back" type="button" class="bg-gray-500 active:bg-gray-600 disabled:bg-gray-600 text-white py-1 px-3">
        <svg clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="m9.474 5.209s-4.501 4.505-6.254 6.259c-.147.146-.22.338-.22.53s.073.384.22.53c1.752 1.754 6.252 6.257 6.252 6.257.145.145.336.217.527.217.191-.001.383-.074.53-.221.293-.293.294-.766.004-1.057l-4.976-4.976h14.692c.414 0 .75-.336.75-.75s-.336-.75-.75-.75h-14.692l4.978-4.979c.289-.289.287-.761-.006-1.054-.147-.147-.339-.221-.53-.221-.191-.001-.38.071-.525.215z" fill-rule="nonzero"/></svg>
      </button> -->
      <button id="refresh" type="button" class="bg-gray-500 active:bg-gray-600 disabled:bg-gray-600 text-white py-1 px-3">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M13.5 2c-5.621 0-10.211 4.443-10.475 10h-3.025l5 6.625 5-6.625h-2.975c.257-3.351 3.06-6 6.475-6 3.584 0 6.5 2.916 6.5 6.5s-2.916 6.5-6.5 6.5c-1.863 0-3.542-.793-4.728-2.053l-2.427 3.216c1.877 1.754 4.389 2.837 7.155 2.837 5.79 0 10.5-4.71 10.5-10.5s-4.71-10.5-10.5-10.5z"/></svg>
      </button>
      <input type="text" name="url" class="px-2 flex-1 bg-white">
      <button type="submit" class="bg-cyan-600 active:bg-cyan-700 text-white py-1 px-6">GO</button>
      <button id="terminate" type="button" class="bg-red-600 active:bg-red-700 text-white py-1 px-6">TERMINATE</button>

      <div id="selectorSection" class="fixed mt-20 bg-gray-500 top-5 right-5 w-[36%] bg-gradient-workflow bg-custom-bg rounded-lg z-50 px-3 py-6 flex flex-col hidden">
        <h1 class="text-cyan-50 mb-2 text-center">Selecting element to click</h1>
        <!-- Hidden input for storing class names -->
        <input id="selectorElement" type="text" class="p-1.5 border rounded-md bg-white" value="" />
      </div>
    </form>

    <iframe id="content" sandbox="allow-same-origin allow-scripts" class="aspect-video h-full border-x-4 border-b-4 border-cyan-600 rounded-b-lg relative z-[1]"></iframe>
  </div>
  <div id="history" class="h-auto w-full flex flex-col justify-end items-end gap-2 border-cyan-600 border m-auto relative"></div>

  <script type="module">
    import { io } from "https://cdn.socket.io/4.7.5/socket.io.esm.min.js";

    const histories = []
    const socket = io("http://localhost:3000", {
      auth: {
        apiKey: '1|ekx1KXvkGy6uGYTmii5v6oabgb40mtmk4lDPXlIa4c2e119f'
      }
    });

    const htmlFrame = document.getElementById('content');
    const form = document.getElementById('form');
    const urlInput = document.querySelector('input[name="url"]');
    const history = document.getElementById('history');
    const terminate = document.getElementById('terminate');
    const back = document.getElementById('back');
    const refresh = document.getElementById('refresh');
    const loadingOverlay = document.getElementById('browser-loading-overlay');
    const selectorSection = document.getElementById('selectorSection');

    toastr.options.timeOut = 5000;

    socket.on("res-html", (res) => {
      setLoading(false);
      const html = res.html;
      const url = res.url;
      htmlFrame.srcdoc = html
      htmlFrame.src = url
      urlInput.value = url
      handleActions()
      console.log(res)
    })

    socket.on("res-input", (res) => {
      setLoading(false);
      toastr.success(res.message);
    })

    socket.on("error", (res) => {
      setLoading(false);
      toastr.error(res.message);
    })

    form?.addEventListener('submit', function (e) {
      e.preventDefault();
      const url = urlInput.value;

      const urlRegex = /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;

      if (!url.match(urlRegex)) {
        toastr.warning("The url must be a valid URL");
        return;
      }

      selectorSection.classList.remove('hidden');

      setLoading(true);
      socket.emit("req-html", { url });
    });

    terminate?.addEventListener('click', function (e) {
      setLoading(false);
      htmlFrame.srcdoc = ""
      urlInput.value = ""
      socket.emit("terminate-session", (res) => {
        toastr.info(res.message);
      });
    })

    back?.addEventListener('click', function (e) {
      setLoading(true)
      socket.emit("req-page", { action: 'back' }, (res) => {
        if (res.success) {
          histories.push({ "action": "back", "selector": res.url })
          history.innerHTML += `<div class="bg-white rounded-full px-8 py-2 text-sm">Navigate back to <b>${res.url.slice(0, 30)}</b>...</div>`
        } else {
          setLoading(false)
        }
      });
    })

    refresh?.addEventListener('click', function (e) {
      setLoading(true)
      socket.emit("req-page", { action: 'refresh' }, (res) => {
        if (res.success) {
          histories.push({ "action": "refresh", "selector": res.url })
          history.innerHTML += `<div class="bg-white rounded-full px-8 py-2 text-sm">Refreshing page <b>${res.url.slice(0, 30)}</b>...</div>`
        } else {
          setLoading(false)
        }
      });
    })

    function setLoading(state) {
      if (state) loadingOverlay.style.visibility = 'visible';
      else loadingOverlay.style.visibility = 'hidden';
    }

    function handleActions() {
      htmlFrame.onload = function () {
        manipulateAction()
      };

      if (htmlFrame.contentWindow.document.readyState === 'complete') {
        manipulateAction()
      }
    }

    function manipulateAction() {
      const iframeWindow = htmlFrame.contentWindow;
      const iframeDoc = htmlFrame.contentDocument || iframeWindow?.document;

      const clickableElements = ['a', 'b', 'button', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'input', 'span'];
      clickableElements.forEach(tag => {
        iframeDoc.querySelectorAll(tag).forEach(element => {
          element.addEventListener('click', function (event) {
            event.preventDefault();
            highlightElement(element);
          });
        });
      });
    }

    function highlightElement(element) {
      const clickedClassName = element.className;
      console.log(clickedClassName)
      const textInput = document.getElementById('selectorElement');

      textInput.value = `${clickedClassName}`;
    }

    htmlFrame.onload = function () {
      const iframeWindow = htmlFrame.contentWindow;
      const iframeDoc = htmlFrame.contentDocument || iframeWindow?.document;

      iframeDoc.body.addEventListener('click', function (event) {
        highlightElement(event.target);
      });
    };
  </script>
</body>

</html>
