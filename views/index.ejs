<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Laravel Browser Sim</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css" rel="stylesheet">
  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
  <script src="https://unpkg.com/@tailwindcss/browser@4"></script>

  <style>
    #browser-loading-overlay {
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: 600;
      font-size: 1.5rem;
      position: absolute;
      top: 32px;
      left: 0;
      z-index: 99999;
      font-family: sans-serif;
      background-color: rgba(0, 0, 0, 0.4);
      visibility: hidden;
    }

    /* Style for the dashed border highlight */
    .highlight {
      outline: 3px dashed rgba(0, 123, 255, 0.7); /* Dashed blue border */
      background-color: rgba(0, 123, 255, 0.2);  /* Light blue background */
    }
  </style>
</head>

<body class="h-screen flex justify-between items-start bg-gray-700">
  <div class="h-[85vh] m-auto relative">
    <div id="browser-loading-overlay">
      Loading...
    </div>

    <form id="form" class="flex gap-2">
      <button id="back" type="button" class="bg-gray-500 active:bg-gray-600 disabled:bg-gray-600 text-white py-1 px-3"><x-heroicon-o-arrow-left class="w-6 h-6" /></button>
      <button id="refresh" type="button" class="bg-gray-500 active:bg-gray-600 disabled:bg-gray-600 text-white py-1 px-3"><x-heroicon-o-arrow-path class="w-6 h-6" /></button>
      <input type="text" name="url" class="px-2 flex-1">
      <button type="submit" class="bg-cyan-600 active:bg-cyan-700 text-white py-1 px-6">GO</button>
      <button id="terminate" type="button" class="bg-red-600 active:bg-red-700 text-white py-1 px-6">TERMINATE</button>
    </form>

    <iframe id="content" sandbox="allow-same-origin allow-scripts" class="aspect-video h-full border-x-4 border-b-4 border-cyan-600 rounded-b-lg relative z-[1]"></iframe>
  </div>
  <div id="history" class="h-[85vh] w-[35vh] flex flex-col justify-end items-end gap-2 border-cyan-600 border m-auto relative"></div>

  <script type="module">
    import { io } from "https://cdn.socket.io/4.7.5/socket.io.esm.min.js";

    const histories = []
    const socket = io("http://localhost:3000", {
      auth: {
        apiKey: '16|JOfgrDMFNnsVhy4C0aDxpj3cjP4kXbe5MnmcVSbSe3b57679'
      }
    });

    const htmlFrame = document.getElementById('content');
    const form = document.getElementById('form');
    const urlInput = document.querySelector('input[name="url"]');
    const history = document.getElementById('history');
    const terminate = document.getElementById('terminate');
    const back = document.getElementById('back');
    const refresh = document.getElementById('refresh');
    const loadingOverlay = document.getElementById('browser-loading-overlay');

    toastr.options.timeOut = 5000;

    document.addEventListener("DOMContentLoaded", function () {
    const params = new URLSearchParams(window.location.search);
    const urlParam = params.get("url"); // Get the `url` query parameter
    console.log("URL parameter:", urlParam);
    if (urlParam) {
      // Validate the URL
      const urlRegex =
        /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;
  
      if (!urlParam.match(urlRegex)) {
        console.error("Invalid URL in parameter");
      } else {
        // Update input field
        urlInput.value = urlParam;
        urlInput.disabled = true;
        setLoading(true);
        socket.emit("req-html", {
        url: urlParam
      });
      }
    }
  });

    socket.on("res-html", (res) => {
      setLoading(false);
      const html = res.html;
      const url = res.url;
      htmlFrame.srcdoc = html
      htmlFrame.src = url
      urlInput.value = url
      handleActions()
      console.log(res)
    })

    socket.on("res-input", (res) => {
      setLoading(false);
      toastr.success(res.message);
    })

    socket.on("error", (res) => {
      setLoading(false);
      toastr.error(res.message);
    })

    form?.addEventListener('submit', function (e) {
      e.preventDefault();
      const url = urlInput.value;

      const urlRegex = /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;

      if (!url.match(urlRegex)) {
        toastr.warning("The url must be a valid URL");
        return;
      }

      setLoading(true);
      socket.emit("req-html", { url });
    });

    terminate?.addEventListener('click', function (e) {
      setLoading(false);
      htmlFrame.srcdoc = ""
      urlInput.value = ""
      socket.emit("terminate-session", (res) => {
        toastr.info(res.message);
      });
    })

    back?.addEventListener('click', function (e) {
      setLoading(true)
      socket.emit("req-page", { action: 'back' }, (res) => {
        if (res.success) {
          histories.push({ "action": "back", "selector": res.url })
          history.innerHTML += `<div class="bg-white rounded-full px-8 py-2 text-sm">Navigate back to <b>${res.url.slice(0, 30)}</b>...</div>`
        } else {
          setLoading(false)
        }
      });
    })

    refresh?.addEventListener('click', function (e) {
      setLoading(true)
      socket.emit("req-page", { action: 'refresh' }, (res) => {
        if (res.success) {
          histories.push({ "action": "refresh", "selector": res.url })
          history.innerHTML += `<div class="bg-white rounded-full px-8 py-2 text-sm">Refreshing page <b>${res.url.slice(0, 30)}</b>...</div>`
        } else {
          setLoading(false)
        }
      });
    })

    function setLoading(state) {
      if (state) loadingOverlay.style.visibility = 'visible';
      else loadingOverlay.style.visibility = 'hidden';
    }

    function handleActions() {
      htmlFrame.onload = function () {
        manipulateAction()
        handleMouseOverText()
      };

      if (htmlFrame.contentWindow.document.readyState === 'complete') {
        manipulateAction()
        handleMouseOverText()
      }
    }


    function handleMouseOverText() {
      const iframeWindow = htmlFrame.contentWindow;
      const iframeDoc = htmlFrame.contentDocument || iframeWindow?.document;

      if (!iframeDoc) return;

      iframeDoc.addEventListener('mouseover', function (event) {
        if (!event.target.classList.contains('clicked')) {
          event.target.style.outline = "2px dashed #06b6d4";
        }
      });

      iframeDoc.addEventListener('mouseout', function (event) {
        if (!event.target.classList.contains('clicked')) {
          event.target.style.outline = ""; // Remove the outline unless clicked
        }
      });

      iframeDoc.addEventListener('click', function (event) {
        // Remove 'clicked' class from other elements
        iframeDoc.querySelectorAll('.clicked').forEach(el => {
          el.classList.remove('clicked');
        });

        event.target.classList.add('clicked'); // Mark clicked element
        event.target.style.outline = "2px dashed #06b6d4"; // Keep outline on click
      });
    }


    function manipulateAction() {
      const iframeWindow = htmlFrame.contentWindow;
      const iframeDoc = htmlFrame.contentDocument || iframeWindow?.document;

      const originalFetch = iframeWindow.fetch;
      iframeWindow.fetch = async function (input, init) {
        let requestUrl = typeof input === 'string' ? input : input.url;
        if (!/^https?:\/\//i.test(requestUrl)) {
          const baseUrl = new URL(htmlFrame.src);
          const absoluteUrl = new URL(requestUrl, baseUrl).href;
          requestUrl = absoluteUrl;
        }
        const res = await originalFetch(requestUrl, init);
        return res;
      };

      const clickableElements = ['a', 'button', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'input', 'span'];
      clickableElements.forEach(tag => {
        iframeDoc.querySelectorAll(tag).forEach(element => {
          element.addEventListener('click', function (event) {
            event.preventDefault();
            highlightElement(element);
          });
        });
      });
    }

    function highlightElement(element) {
      console.log('Element clicked:', element);

      document.querySelectorAll('.highlight').forEach(item => item.classList.remove('highlight'));
      element.classList.add('highlight');
      element.style.outline = '2px dashed #06b6d4';
      element.style.cursor = "pointer";

      console.log('Highlighted element class name:', element.className);
    }
  </script>
</body>

</html>